#!/usr/bin/env perl

# Copyright Â© 2006-2019 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

no lib '.';  # CVE-2016-1238

use v5.10;

use strict;
use warnings;

use Carp qw(croak);
use English qw(-no_match_vars);
use File::Path qw();
use File::stat qw(stat);
use Getopt::Long qw(:config gnu_getopt no_ignore_case);

our $VERSION = '0.4.1';
my $id = undef;
my $path = undef;
my $interval = 60 * 60;  # 1h
my $debug = 0;
my $fail_on_postpone = 0;

my $please_mkdir_home = 0;
my ($HOME) = <~>;

sub get_xdg_var
{
    my ($var) = @_;
    local $_ = $ENV{$var} // '';
    if (m{\A/}) {
        return $_;
    }
    my $fallback = {
        XDG_DATA_HOME => '.local/share',
        XDG_CACHE_HOME => '.cache'
    }->{$var} or croak "unsupported \$$var";
    return "$HOME/$fallback";
}

my $home = undef;
if (exists $ENV{ELVOKE_HOME}) {
    $home = $ENV{ELVOKE_HOME};
} elsif (-d "$HOME/.elvoke/") {
    $home = "$HOME/.elvoke";
} else {
    # XDG Base Directory
    my $xdg_cache_home = get_xdg_var('XDG_CACHE_HOME');
    $home = "$xdg_cache_home/elvoke";
    $please_mkdir_home = 1;
}

sub debug {
    my ($msg) = @_;
    if ($debug) {
        say {*STDERR} "elvoke: debug: $msg";
    }
    return;
};

sub error {
    my ($msg) = @_;
    say {*STDERR} "elvoke: error: $msg";
    exit -1;
}

sub set_id
{
    (undef, $_) = @_;
    /^[A-Za-z0-9_]{6,}$/ or error 'invalid identifier syntax';
    $id = $_;
    return;
}

sub set_path
{
    (undef, $path) = @_;
    $id = undef;
    return;
}

sub set_interval
{
    (undef, $_) = @_;
    $interval = 0;
    my $re_dt = qr/([0-9]+)([dhms])/;
    /^(?:$re_dt)+$/ or error 'invalid interval syntax';
    while (/$re_dt/g) {
        my $dt = int $1;
        $dt *= {
            d => 24 * 60 * 60,
            h =>      60 * 60,
            m =>           60,
            s =>            1,
        }->{$2};
        $interval += $dt;
    }
    return;
}

sub compute_digest
{
    my @args = @_;
    require Digest::MD5;
    my $data = join "\0", @args;
    $_ = Digest::MD5::md5_base64($data);
    s/[^A-Za-z0-9_]/_/g;
    return $_;
}

sub show_version
{
    say "elvoke $VERSION";
    say "+ Perl $PERL_VERSION";
    exit 0;
}

my $usage_summary = 'Usage: elvoke [OPTIONS] -- COMMAND [ARGS...]';

sub show_help()
{
    my $thome = $home;
    $thome =~ s{\A\Q$HOME\E/}{~/};
    print <<"EOF";
$usage_summary

Options:
  -i, --id IDENT      identifier to distinguish between different commands
  -f, --file FILE     stamp file (default: $thome/IDENT.stamp)
  -t, --interval INT  minimum interval between invocations of the same command:
                        Nd = N days
                        Nh = N hours
                        Nm = N minutes
                        Ns = N seconds
                      (default: 1 hour)
  --fail-on-postpone  exit with non-zero code when postponing
  --debug             print debug information
  -h, -?, --help      show this help message and exit
  --version           show version information and exit
EOF
    exit 0;
}

sub bad_usage()
{
    say {*STDERR} $usage_summary;
    exit -1;
}

GetOptions(
    'id|i=s' => \&set_id,
    'file|f=s' => \&set_path,
    'interval|t=s' => \&set_interval,
    'fail-on-postpone' => \$fail_on_postpone,
    'debug' => \$debug,
    'version' => \&show_version,
    'help|h|?' => \&show_help,
) or bad_usage();
if ($#ARGV < 0) {
    bad_usage();
}

debug "home: $home";
if (not defined $path) {
    if (not defined $id) {
        $id = compute_digest @ARGV;
    }
    if ($please_mkdir_home) {
        File::Path::make_path($home, { mode => oct 700 });
    }
    $path = "$home/$id.stamp";
}
if (defined $id) {
    debug "identifier: $id";
}
debug "stamp path: $path";
my $need_run = undef;
my $stat = stat $path;
if (defined $stat) {
    my $elapsed = time - $stat->mtime;
    $need_run = $elapsed > $interval;
    my $op = $need_run ? '>' : '<=';
    debug "$elapsed $op $interval";
} else {
    if ($ERRNO == $ERRNO{ENOENT}) {
        debug 'timestamp not found';
        $need_run = 1;
    } else {
        error "cannot stat $path: $ERRNO";
    }
}
if (not $need_run) {
    exit -2 * $fail_on_postpone;
}
debug 'will update timestamp';
my $pid = fork;
defined $pid or error "fork failed: $ERRNO";
if ($pid == 0) {
    # child:
    exec { $ARGV[0] } @ARGV or exit -1;
} else {
    # parent:
    debug "child pid: $pid";
    $pid = wait;
    if ($pid < 0) {
        error "wait failed: $ERRNO";
    } else {
        my $ec;
        if ($CHILD_ERROR == 0) {
            debug 'the child exited successfully';
            open my $fh, '>', $path or error "cannot open $path: $ERRNO";
            close $fh or error "cannot close $path: $ERRNO";
            $ec = 0;
        } else {
            if ($CHILD_ERROR & 127) {
                my $signo = $CHILD_ERROR & 127;
                debug "the child was killed by signal $signo";
                $ec = 128 + $signo;
            } else {
                $ec = $CHILD_ERROR >> 8;
                debug "the child exited with error code $ec";
            }
        }
        exit $ec;
    }
}

END {
    # catch write errors:
    local $ERRNO = 0;
    close STDOUT or error "stdout: $ERRNO";
    close STDERR or error "stderr: $ERRNO";
}

# vim:ts=4 sts=4 sw=4 et
